/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(GainTest.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f0cfff6be5d4eb880cd9ea53b91dee6f)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/jammingSource/GainTest.h>
// pydoc.h is automatically generated in the build directory
#include <GainTest_pydoc.h>

void bind_GainTest(py::module& m)
{

    using GainTest    = ::gr::jammingSource::GainTest;


    py::class_<GainTest, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<GainTest>>(m, "GainTest", D(GainTest))

        .def(py::init(&GainTest::make),
           py::arg("samp_rate"),
           py::arg("length_per_gain"),
           py::arg("gain_start"),
           py::arg("gain_step"),
           D(GainTest,make)
        )
        




        
        .def("sampling_freq",&GainTest::sampling_freq,       
            D(GainTest,sampling_freq)
        )


        
        .def("current_gain",&GainTest::current_gain,       
            D(GainTest,current_gain)
        )


        
        .def("set_sampling_freq",&GainTest::set_sampling_freq,       
            py::arg("sampling_freq"),
            D(GainTest,set_sampling_freq)
        )


        
        .def("set_length_per_gain",&GainTest::set_length_per_gain,       
            py::arg("length_per_gain"),
            D(GainTest,set_length_per_gain)
        )


        
        .def("set_gain_start",&GainTest::set_gain_start,       
            py::arg("gain_start"),
            D(GainTest,set_gain_start)
        )


        
        .def("set_gain_step",&GainTest::set_gain_step,       
            py::arg("gain_step"),
            D(GainTest,set_gain_step)
        )

        ;




}








