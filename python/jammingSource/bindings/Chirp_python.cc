/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(Chirp.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(c1e3c25605c7ddc9eb047e96298eea3d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/jammingSource/Chirp.h>
// pydoc.h is automatically generated in the build directory
#include <Chirp_pydoc.h>

void bind_Chirp(py::module& m)
{

    using Chirp    = ::gr::jammingSource::Chirp;


    py::class_<Chirp, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<Chirp>>(m, "Chirp", D(Chirp))

        .def(py::init(&Chirp::make),
           py::arg("samp_rate"),
           py::arg("min_freq"),
           py::arg("max_freq"),
           py::arg("period"),
           D(Chirp,make)
        )
        




        
        .def("sampling_freq",&Chirp::sampling_freq,       
            D(Chirp,sampling_freq)
        )


        
        .def("period",&Chirp::period,       
            D(Chirp,period)
        )


        
        .def("set_sampling_freq",&Chirp::set_sampling_freq,       
            py::arg("sampling_freq"),
            D(Chirp,set_sampling_freq)
        )


        
        .def("set_max_freq",&Chirp::set_max_freq,       
            py::arg("max_freq"),
            D(Chirp,set_max_freq)
        )


        
        .def("set_min_freq",&Chirp::set_min_freq,       
            py::arg("min_freq"),
            D(Chirp,set_min_freq)
        )


        
        .def("set_period",&Chirp::set_period,       
            py::arg("period"),
            D(Chirp,set_period)
        )

        ;




}








