/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(TestSingle.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(74f2d74ba1aed5c6873b9d61b4f2538d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/jammingSource/TestSingle.h>
// pydoc.h is automatically generated in the build directory
#include <TestSingle_pydoc.h>

void bind_TestSingle(py::module& m)
{

    using TestSingle    = ::gr::jammingSource::TestSingle;


    py::class_<TestSingle, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<TestSingle>>(m, "TestSingle", D(TestSingle))

        .def(py::init(&TestSingle::make),
           py::arg("samp_rate"),
           py::arg("start_freq"),
           py::arg("step"),
           py::arg("length"),
           py::arg("interval"),
           D(TestSingle,make)
        )
        




        
        .def("sampling_freq",&TestSingle::sampling_freq,       
            D(TestSingle,sampling_freq)
        )


        
        .def("current_freq",&TestSingle::current_freq,       
            D(TestSingle,current_freq)
        )


        
        .def("set_sampling_freq",&TestSingle::set_sampling_freq,       
            py::arg("sampling_freq"),
            D(TestSingle,set_sampling_freq)
        )


        
        .def("set_start_freq",&TestSingle::set_start_freq,       
            py::arg("start_freq"),
            D(TestSingle,set_start_freq)
        )


        
        .def("set_step",&TestSingle::set_step,       
            py::arg("step"),
            D(TestSingle,set_step)
        )


        
        .def("set_length",&TestSingle::set_length,       
            py::arg("length"),
            D(TestSingle,set_length)
        )


        
        .def("set_interval",&TestSingle::set_interval,       
            py::arg("interval"),
            D(TestSingle,set_interval)
        )

        ;




}








